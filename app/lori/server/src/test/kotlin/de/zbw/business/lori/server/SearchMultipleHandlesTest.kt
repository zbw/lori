package de.zbw.business.lori.server

import de.zbw.business.lori.server.type.ItemMetadata
import de.zbw.persistence.lori.server.ConnectionPool
import de.zbw.persistence.lori.server.DatabaseConnector
import de.zbw.persistence.lori.server.DatabaseTest
import de.zbw.persistence.lori.server.ItemDBTest.Companion.NOW
import de.zbw.persistence.lori.server.ItemDBTest.Companion.TEST_Metadata
import io.mockk.every
import io.mockk.mockk
import io.mockk.mockkStatic
import io.mockk.unmockkAll
import io.opentelemetry.api.OpenTelemetry
import kotlinx.coroutines.runBlocking
import org.hamcrest.CoreMatchers.`is`
import org.hamcrest.MatcherAssert.assertThat
import org.testng.annotations.AfterClass
import org.testng.annotations.BeforeClass
import org.testng.annotations.DataProvider
import org.testng.annotations.Test
import java.time.Instant

class SearchMultipleHandlesTest : DatabaseTest() {
    private val backend =
        LoriServerBackend(
            DatabaseConnector(
                connectionPool = ConnectionPool(testDataSource),
                tracer = OpenTelemetry.noop().getTracer("de.zbw.business.lori.server.LoriServerBackendTest"),
            ),
            mockk(),
        )

    private val zdbIdFilterItems =
        listOf(
            TEST_Metadata.copy(
                handle = "11159/12345",
                zdbIds = listOf("555nase"),
            ),
            TEST_Metadata.copy(
                handle = "11159/67832",
                zdbIds = listOf("444nase"),
            ),
            TEST_Metadata.copy(
                handle = "11159/90813",
                zdbIds = listOf("444nase", "333nase"),
            ),
        )

    private fun getInitialMetadata() =
        listOf(
            zdbIdFilterItems,
        ).flatten()

    @BeforeClass
    fun fillDB() =
        runBlocking {
            mockkStatic(Instant::class)
            every { Instant.now() } returns NOW.toInstant()
            getInitialMetadata().forEach {
                backend.insertMetadataElement(it)
            }
        }

    @AfterClass
    fun afterTests() {
        unmockkAll()
    }

    @DataProvider(name = DATA_FOR_MULTIPLE_HANDLES_QUERY)
    fun createDataForMultipleHandles() =
        arrayOf(
            @Suppress("ktlint:standard:max-line-length")
            arrayOf(
                "hdl:\"" + zdbIdFilterItems.joinToString(separator = ",") { it.handle } +
                    ",11159/632043,11159/632044,11159/632045,11159/632046,11159/632047,11159/632048,11159/632049,11159/632050,11159/632051,11159/632052,11159/632053,11159/632054,11159/632055,11159/632056,11159/632057,11159/632058,11159/632059,11159/632060,11159/632061,11159/632062,11159/632063,11159/632064,11159/632065,11159/632066,11159/632067,11159/632068,11159/632069,11159/632070,11159/632071,11159/632072,11159/632073,11159/632074,11159/632075,11159/632076,11159/632077,11159/632078,11159/632079,11159/632080,11159/632081,11159/632082,11159/632083,11159/632084,11159/632085,11159/632086,11159/632087,11159/632088,11159/632089,11159/632090,11159/632091,11159/632092,11159/632093,11159/632094,11159/632095,11159/632096,11159/632097,11159/632098,11159/632099,11159/632100,11159/632101,11159/632102,11159/632103,11159/632104,11159/632105,11159/632106,11159/632107,11159/632108,11159/632109,11159/632110,11159/632111,11159/632112,11159/632113,11159/632114,11159/632115,11159/632116,11159/632117,11159/632118,11159/632119,11159/632120,11159/632121,11159/632122,11159/632123,11159/632124,11159/632125,11159/632126,11159/632127,11159/632128,11159/632129,11159/632130,11159/632131,11159/632132,11159/632133,11159/632134,11159/632135,11159/632136,11159/632137,11159/632138,11159/632139,11159/632140,11159/632141,11159/632142,11159/632143,11159/632144,11159/632145,11159/632146,11159/632147,11159/632148,11159/632149,11159/632150,11159/632151,11159/632152,11159/632153,11159/632154,11159/632155,11159/632156,11159/632157,11159/632158,11159/632159,11159/632160,11159/632161,11159/632162,11159/632163,11159/632164,11159/632165,11159/632166,11159/632167,11159/632168,11159/632169,11159/632170,11159/632171,11159/632172,11159/632173,11159/632174,11159/632175,11159/632176,11159/632177,11159/632178,11159/632179,11159/632180,11159/632181,11159/632182,11159/632183,11159/632184,11159/632185,11159/632186,11159/632187,11159/632188,11159/632189,11159/632190,11159/632191,11159/632192,11159/632193,11159/632194,11159/632195,11159/632196,11159/632197,11159/632198,11159/632199,11159/632200,11159/632201,11159/632202,11159/632203,11159/632204,11159/632205,11159/632206,11159/632207,11159/632208,11159/632209,11159/632210,11159/632211,11159/632212,11159/632213,11159/632214,11159/632215,11159/632216,11159/632217,11159/632218,11159/632219,11159/632220,11159/632221,11159/632222,11159/632223,11159/632224,11159/632225,11159/632226,11159/632227,11159/632228,11159/632229,11159/632230,11159/632231,11159/632232,11159/632233,11159/632234,11159/632235,11159/632236,11159/632237,11159/632238,11159/632239,11159/632240,11159/632241,11159/632242,11159/632243,11159/632244,11159/632245,11159/632246,11159/632247,11159/632248,11159/632249,11159/632250,11159/632251,11159/632252,11159/632253,11159/632254,11159/632255,11159/632256,11159/632257,11159/632258,11159/632259,11159/632260,11159/632261,11159/632262,11159/632263,11159/632264,11159/632265,11159/632266,11159/632267,11159/632268,11159/632269,11159/632270,11159/632271,11159/632272,11159/632273,11159/632274,11159/632275,11159/632276,11159/632277,11159/632278,11159/632279,11159/632280,11159/632281,11159/632282,11159/632283,11159/632284,11159/632285,11159/632286,11159/632287,11159/632288,11159/632289,11159/632290,11159/632291,11159/632292,11159/632293,11159/632294,11159/632295,11159/632296,11159/632297,11159/632298,11159/632299,11159/632300,11159/632301,11159/632302,11159/632303,11159/632304,11159/632305,11159/632306,11159/632307,11159/632308,11159/632309,11159/632310,11159/632311,11159/632312,11159/632313,11159/632314,11159/632315,11159/632316,11159/632317,11159/632318,11159/632319,11159/632320,11159/632321,11159/632322,11159/632323,11159/632324,11159/632325,11159/632326,11159/632327,11159/632328,11159/632329,11159/632330,11159/632331,11159/632332,11159/632333,11159/632334,11159/632335,11159/632336,11159/632337,11159/632338,11159/632339,11159/632340,11159/632341,11159/632342,11159/632343,11159/632344,11159/632345,11159/632346,11159/632347,11159/632348,11159/632349,11159/632350,11159/632351,11159/632352,11159/632353,11159/632354,11159/632355,11159/632356,11159/632357,11159/632358,11159/632359,11159/632360,11159/632361,11159/632362,11159/632363,11159/632364,11159/632365,11159/632366,11159/632367,11159/632368,11159/632369,11159/632370,11159/632371,11159/632372,11159/632373,11159/632374,11159/632375,11159/632376,11159/632377,11159/632378,11159/632379,11159/632380,11159/632381,11159/632382,11159/632383,11159/632384,11159/632385,11159/632386,11159/632387,11159/632388,11159/632389,11159/632390,11159/632391,11159/632392,11159/632393,11159/632394,11159/632395,11159/632396,11159/632397,11159/632398,11159/632399,11159/632400,11159/632401,11159/632402,11159/632403,11159/632404,11159/632405,11159/632406,11159/632407,11159/632408,11159/632409,11159/632410,11159/632411,11159/632412,11159/632413,11159/632414,11159/632415,11159/632416,11159/632417,11159/632418,11159/632419,11159/632420,11159/632421,11159/632422,11159/632423,11159/632424,11159/632425,11159/632426,11159/632427,11159/632428,11159/632429,11159/632430,11159/632431,11159/632432,11159/632433,11159/632434,11159/632435,11159/632436,11159/632437,11159/632438,11159/632439,11159/632440,11159/632441,11159/632442,11159/632443,11159/632444,11159/632445,11159/632446,11159/632447,11159/632448,11159/632449,11159/632450,11159/632451,11159/632452,11159/632453,11159/632454,11159/632455,11159/632456,11159/632457,11159/632458,11159/632459,11159/632460,11159/632461,11159/632462,11159/632463,11159/632464,11159/632465,11159/632466,11159/632467,11159/632468,11159/632469,11159/632470,11159/632471,11159/632472,11159/632473,11159/632474,11159/632475,11159/632476,11159/632477,11159/632478,11159/632479,11159/632480,11159/632481,11159/632482\"",
                zdbIdFilterItems.toSet(),
                "Huge query",
            ),
            arrayOf(
                "hdl:" + zdbIdFilterItems.joinToString(separator = ",", prefix = "\"", postfix = "\"") { it.handle },
                zdbIdFilterItems.toSet(),
                "Two handles",
            ),
        )

    @Test(dataProvider = DATA_FOR_MULTIPLE_HANDLES_QUERY)
    fun queryMultipleHandles(
        searchTerm: String,
        expectedMetadata: Set<ItemMetadata>,
        reason: String,
    ) {
        val searchResult =
            runBlocking {
                backend.searchQuery(
                    searchTerm,
                    10,
                    0,
                )
            }
        assertThat(
            reason,
            searchResult.results.map { it.metadata }.toSet(),
            `is`(expectedMetadata),
        )
    }

    companion object {
        const val DATA_FOR_MULTIPLE_HANDLES_QUERY = "DATA_FOR_MULTIPLE_HANDLES_QUERY "
    }
}
